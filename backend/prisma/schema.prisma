generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")       // Untuk koneksi aplikasi (pooling)
  directUrl = env("DIRECT_URL")         // Khusus migrasi
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  decks     Deck[]
  Progress  Progress[]
  sets      Set[]
}

model Set {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  createdAt DateTime @default(now())
  decks     Deck[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deck {
  id          Int         @id @default(autoincrement())
  userId      Int
  setId       Int?
  name        String
  description String?
  createdAt   DateTime    @default(now())
  set         Set?        @relation(fields: [setId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Flashcard   Flashcard[]
  progress    Progress[]
  Quiz        Quiz[]
}

model Progress {
  id            Int       @id @default(autoincrement())
  userId        Int
  deckId        Int
  cardsMastered Int       @default(0)
  studyTime     String?   @default("0 seconds")
  lastReviewed  DateTime  @default(now())
  deck          Deck      @relation(fields: [deckId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flashcard {
  id         Int      @id @default(autoincrement())
  deckId     Int
  question   String
  answer     String
  sourceText String?
  createdAt  DateTime @default(now())
  deck       Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
}

model Quiz {
  id            Int      @id @default(autoincrement())
  deckId        Int
  question      String
  correctAnswer String
  options       Json?
  createdAt     DateTime @default(now())
  deck          Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
}
